shiny::runApp()
runApp()
runApp()
TX_species <- read.csv(file = 'data/TX_species_w_expend.csv', header = TRUE)
library(dplyr)
arrange(TX_species, global_rank)
nrow(TX_species)/5
seq(1,nrow(TX_species), 43)
rep(1:5, each = 43)
43.2*5
runApp()
runApp()
runApp()
runApp()
expression('poop in a bucket')
expression('global_rank_2')
labNames <- c('xLab', 'yLab')
bquote(.labNames[1]) ~ x^2)
bquote(.(labNames[1]) ~ x^2)
substitute(paste(nn, x^2), list(nnlabNames[1]))
substitute(paste(nn, x^2), list(nn=labNames[1]))
testlist <- list('prevent extinction' = 'butt')
substitute(testlist[1])
substitute('testlist[1]')
quote('boner')
quote(boner)
runApp()
runApp()
runApp()
runApp()
save.image("C:/Users/mevans/repos/TX_priorities/data/data.RData")
shiny::runApp()
runApp()
load("C:/Users/mevans/repos/TX_priorities/data/data.RData")
arrange(TX_species, 'federal_status')
arrange(TX_species, federal_status)
arrange(TX_species, expression('federal_status'))
arrange(TX_species, quote('federal_status'))
arrange(TX_species, bquote('federal_status'))
arrange(TX_species, get('federal_status'))
arrange(TX_species, unquote('federal_status'))
expression('federal_status')
expression(paste('federal_status'))
arrange(TX_species, as.name('federal_status'))
arrange(TX_species, as.call('federal_status'))
test <- 'federal_status'
arrange(TX_species, paste(test))
arrange(TX_species, eval(test))
arrange(TX_species, expression(test))
arrange(TX_species, get(test))
arrange_(TX_species, test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
expand.grid(c(1,0.5, 0.25, 0.125, 0.0625), c(0, 10), c(0,20), c(0,50))
test <- expand.grid(c(1,0.5, 0.25, 0.125, 0.0625), c(0, 10), c(0,20), c(0,50))
test <- dplyr::mutate(test, score = Var1*sum(Var2, Var3, Var4))
hist(test$score)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sum(50,20,20,10,10,30)
140*1
expand.grid(1/(1:216),
c(50,0), c(20,0), c(20,0), c(10,0), c(10,0), c(30,0))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("C:/Users/mevans/repos/TX_priorities/data/data.RData")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rescale(log(16), to = c(0,1), from = log(c(0,140)))
log(16)
loc(c(0,140))
log(c(0,140))
range(log(0,1,25,34,15,3))
range(log(c(0,1,25,34,15,3)))
range(log(c(0,1,25,34,15,3)), na.rm = TRUE)
runApp()
runApp()
load("C:/Users/mevans/repos/TX_priorities/data/data.RData")
counties <- readRDS(file = 'data/ESA_contis_2017-12-27.rds')
counties <- readRDS(file = 'data/ESA_counties_2017-12-27.rds')
TX_species$scientific_name %in% counties$scientific_name
runApp()
TX_species$scientific_name[!TX_species$scientific_name %in% counties$scientific_name]
View(counties)
View(TX_species)
filter(TX_species, federal_status == 'Endangered' | 'Threatened')
filter(TX_species, federal_status == 'Endangered' | federal_status == 'Threatened')
filter(TX_species, federal_status == 'Endangered' | federal_status == 'Threatened', scientific_name %in% counties$scientific_name)
TX_species$federal_status[!TX_species$scientific_name %in% counties$scientific_name]
filter(TX_species, federal_status == 'Endangered' | federal_status == 'Threatened', !scientific_name %in% counties$scientific_name)
log2(300)
county_data <- read.csv(file = "C:/Users/mevans/repos/esasummary/inst/extdata/US_counties_attrib.csv", header = TRUE)
runApp()
TX_species$county_fips <- as.integer(TX_species$county_fips)
as.integer(TX_species$county_fips)
TX_species$county_fips <- as.numeric(TX_species$county_fips)
as.numeric(TX_species$county_fips)
counties$county_fips <- as.numeric(counties$county_fips)
counties <- select(county_data, GEOID, ALAND)%>%
right_join(counties, by = c("GEOID" = "county_fips"))%>%
filter(state == 'Texas')%>%
group_by(scientific_name)%>%
summarise(area = sum(ALAND))
counties <- select(county_data, GEOID, ALAND)%>%
right_join(counties, by = c("GEOID" = "county_fips"))%>%
filter(state_name == 'Texas')%>%
group_by(scientific_name)%>%
summarise(area = sum(ALAND))
counties <- readRDS(file = 'data/ESA_counties_2017-12-27.rds')
counties$county_fips <- as.numeric(counties$county_fips)
counties <- select(county_data, GEOID, ALAND)%>%
right_join(counties, by = c("GEOID" = "county_fips"))%>%
filter(state_name == 'Texas')%>%
group_by(scientific_name, common_name)%>%
summarise(area = sum(ALAND))
left_join(TX_species, counties, by = common_name)
left_join(TX_species, counties, by = "common_name")
45+171
TX_species <- left_join(TX_species, counties, by = "common_name")
View(TX_species)
saveRDS(county_data, file = "data/US_counties_attrib.rds")
load("C:/Users/mevans/repos/TX_priorities/data/data.RData")
county_data <- readRDS(file = "data/US_counties_attrib.rds")
counties <- readRDS(file = 'data/ESA_counties_2017-12-27.rds')
TX_species$common_name <- as.character(TX_species$common_name)
TX_species$scientific_name <- as.character(TX_species$scientific_name)
counties$county_fips <- as.numeric(counties$county_fips)
counties <- select(county_data, GEOID, ALAND)%>%
right_join(counties, by = c("GEOID" = "county_fips"))%>%
filter(state_name == 'Texas')%>%
group_by(scientific_name, common_name)%>%
summarise(area = sum(ALAND))
library(dplyr)
counties <- select(county_data, GEOID, ALAND)%>%
right_join(counties, by = c("GEOID" = "county_fips"))%>%
filter(state_name == 'Texas')%>%
group_by(scientific_name, common_name)%>%
summarise(area = sum(ALAND))
lapply(1:nrow(TX_species), function(x){
area <- ifelse(TX_species$scientific_name[x] %in% counties$scientific_name,
counties$area[TX_species$scientific_name[x] %in% counties$scientific_name], ifelse(TX_species$common_name[x] %in% counties$common_name,
counties$area[TX_species$common_name[x] %in% counties$common_name], NA))
return(area)
})
unlist(lapply(1:nrow(TX_species), function(x){
area <- ifelse(TX_species$scientific_name[x] %in% counties$scientific_name,
counties$area[TX_species$scientific_name[x] %in% counties$scientific_name], ifelse(TX_species$common_name[x] %in% counties$common_name,
counties$area[TX_species$common_name[x] %in% counties$common_name], NA))
return(area)
})
)
TX_species$Area <- unlist(lapply(1:nrow(TX_species), function(x){
area <- ifelse(TX_species$scientific_name[x] %in% counties$scientific_name,
counties$area[TX_species$scientific_name[x] %in% counties$scientific_name], ifelse(TX_species$common_name[x] %in% counties$common_name,
counties$area[TX_species$common_name[x] %in% counties$common_name], NA))
return(area)
})
)
TX_species$Area <- unlist(lapply(1:nrow(TX_species), function(x){
area <- ifelse(TX_species$scientific_name[x] %in% counties$scientific_name,
counties$area[counties$scientific_name == TX_species$scientific_name[x]], ifelse(TX_species$common_name[x] %in% counties$common_name,
counties$area[counties$common_name == TX_species$common_name[x]], NA))
return(area)
})
)
grepl(TX_species$scientific_name[2], counties$scientific_name, ignore.case = TRUE)
if(grepl(TX_species$scientific_name[2], counties$scientific_name, ignore.case = TRUE)){print('TRUE')}
scenario = pairwise"
""
wksp<-"H:/MikeGradSchool/PhD/Bears/analyses/LCTA/Combined/Circuitscape/R"
text1<-"[Options for advanced mode]
ground_file_is_resistances = True
remove_src_or_gnd = keepall
ground_file = (Browse for a ground point file)
use_unit_currents = False
source_file = (Browse for a current source file)
use_direct_grounds = False
[Mask file]
mask_file = None
use_mask = False
[Calculation options]
low_memory_mode = False
parallelize = False
solver = cg+amg
print_timings = False
preemptive_memory_release = False
print_rusages = False
max_parallel = 0
[Short circuit regions (aka polygons)]
polygon_file = (Browse for a short-circuit region file)
use_polygons = False
[Options for one-to-all and all-to-one modes]
use_variable_source_strengths = False
variable_source_file = None
[Output options]
set_null_currents_to_nodata = False
set_focal_node_currents_to_zero = False
set_null_voltages_to_nodata = False
compress_grids = False
write_cur_maps = False
write_volt_maps = False"
text2<-"write_cum_cur_map_only = False
log_transform_maps = False
write_max_cur_maps = False
[Version]
version = 4.0.5
[Options for reclassification of habitat data]
reclass_file = (Browse for file with reclassification data)
use_reclass_table = False
[Logging Options]
log_level = INFO"
text3<-"profiler_log_file = None
screenprint_log = False
[Options for pairwise and one-to-all and all-to-one modes]
included_pairs_file = (Browse for a file with pairs to include or exclude)
use_included_pairs = False"
text4<-"[Connection scheme for raster habitat data]
connect_using_avg_resistances = False
connect_four_neighbors_only = False
[Habitat raster or graph]
habitat_map_is_resistances = True"
text5<-"[Circuitscape mode]
data_type = raster
scenario = pairwise"
for (hab in list("forest", "house")){
for(x in list ("2", "5", "10", "100", "fifth", "half", "hndth", "one", "tenth")){
file1<-paste("output_file = H:\\MikeGradSchool\\PhD\\Bears\\analyses\\LCTA\\Combined\\Circuitscape\\B\\",hab,"_",x,".out",sep="")
file2<-paste("log_file = H:\\MikeGradSchool\\PhD\\Bears\\analyses\\LCTA\\Combined\\Circuitscape\\B\\",hab,"_",x,".log",sep="")
file3<-"point_file = H:\\MikeGradSchool\\PhD\\Bears\\analyses\\LCTA\\Combined\\B_F_Centroids.txt"
file4<-paste("habitat_file = H:\\MikeGradSchool\\PhD\\Bears\\analyses\\LCTA\\Combined\\Circuitscape\\",hab,"_",x,".txt",sep="")
cat(c(text1,file1,text2,file2,text3,file3,text4,file4,text5),file=paste(wksp,"/B",hab,"_",x,".ini",sep=""),sep="\n")
}
}
as.data.frame(matrix(c(,2,1,2,2,1,2,1),2,4,byrow=TRUE))
as.data.frame(matrix(c(1,2,1,2,2,1,2,1),2,4,byrow=TRUE))
install.packages("pedantics")
library(pedantics)
males <- paste("m", seq(1:20))
males <- paste("m", seq(1:20), sep = "")
females <- paste("f", seq(1:30), sep = "")
offspring <- paste("o", seq(1:100), sep = "")
pedigree <- as.data.frame(id = c(males, females, offspring), dam = NA, sire = NA)
pedigree <- data.frame(id = c(males, females, offspring), dam = NA, sire = NA)
head(pedigree)
pedigree$dam[51:150] <- sample(100, females, replace = TRUE)
sample(100, females, replace = TRUE)
sample(females, 100, replace = TRUE)
pedigree$dam[51:150] <- sample(females, 100, replace = TRUE)
pedigree$sire[51:150] <- sample(males, 100, replace = TRUE)
genotypes <- read.csv(file = "H:/MikeGradSchool/PhD/Bears/analyses/MLRelate/pedigree_sim.csv", header = FALSE)
head(genotypes)
genotypes <- read.csv(file = "H:/MikeGradSchool/PhD/Bears/analyses/MLRelate/pedigree_sim.csv", header = TRUE)
library(pedantics)
test <- microsim(pedigree = pedigree, genotypesSample = genotypes)
head(test$observedGenotypes)
write.csv(test$observedGenotypes, file = "H:/MikeGradSchool/PhD/Bears/analyses/ML_Relate/sim.csv")
write.csv(test$observedGenotypes, file = "H:/MikeGradSchool/PhD/Bears/analyses/MLRelate/sim.csv")
rep(c(0,1,5,10), 16)
rep(c(0,1,5,10), each = 16)
rep(c(0,1,5,10), each = 4)
rep(rep(c(0,1,5,10), each = 4), 4)
shiny::runApp()
load("C:/Users/mevans/repos/TX_priorities/data/data.RData")
county_data <- readRDS(file = "data/US_counties_attrib.rds")
counties <- readRDS(file = 'data/ESA_counties_2017-12-27.rds')
save.image("C:/Users/mevans/repos/TX_priorities/data/data.RData")
TX_species$common_name <- as.character(TX_species$common_name)
TX_species$scientific_name <- as.character(TX_species$scientific_name)
counties$county_fips <- as.numeric(counties$county_fips)
county_sums <- select(county_data, GEOID, ALAND)%>%
right_join(counties, by = c("GEOID" = "county_fips"))%>%
filter(state_name == 'Texas')%>%
group_by(scientific_name, common_name)%>%
summarise(area = sum(ALAND))
library(dplyr)
county_sums <- select(county_data, GEOID, ALAND)%>%
right_join(counties, by = c("GEOID" = "county_fips"))%>%
filter(state_name == 'Texas')%>%
group_by(scientific_name, common_name)%>%
summarise(area = sum(ALAND))
runApp()
runApp()
truncate(nrow(TX_species)/5)
nrow(TX_species %/% 5)
nrow(TX_species) %/% 5
nrow(TX_species)
43*5
unlist(lapply(1:nrow(TX_species), function(x){
area <- ifelse(grepl(TX_species$scientific_name[x], county_sums$scientific_name, ignore.case = TRUE),
county_sums$area[county_sums$scientific_name == TX_species$scientific_name[x]],
ifelse(grepl(TX_species$common_name[x], county_sums$common_name, ignore.case = TRUE),
county_sums$area[county_sums$common_name == TX_species$common_name[x]], NA))
return(area)
})
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('www/ui.R')
runApp('www/ui.R')
runApp('www/ui.R')
runApp('www/ui.R')
runApp('www')
runApp('www')
runApp('www')
runApp('www')
runApp('www')
runApp('www')
runApp('www')
runApp('www')
runApp('www')
runApp('www')
load("C:/Users/mevans/repos/TX_priorities/www/data/data.RData")
runApp('www')
runApp('www')
runApp('www')
runApp('www')
runApp('www')
runApp('www')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
levels(TX_species$federal_status)
uniqeu(TX_species$federal_status)
unique(TX_species$federal_status)
runApp()
TX_species$federal_status[3]
levels(TX_species$federal_status)
factor(TX_species$federal_status, levels = c("Not listed", "Delisted", "Proposed Threatened", "Proposed Endangered", "Candidate", "Endangered, Proposed for Delisting", "Threatened", "Endangered"))
TX_species$federal_status
levels(TX_species$global_rank)
levels(TX_species$global_rank_2)
levels(TX_species$rpn)
factor(TX_species$rpn, levels = c("1", "1C", "2", "2C", "3", "3C", "7", "7C", "8", "8C", "9", "9C", "13", "13C", "4", "4C", "5", "5C", "6", "6C", "10", "10C", "11", "11C", "12", "12C", "UNK"))
factor(TX_species$rpn, levels = c("1", "1C", "2", "2C", "3", "3C", "7", "7C", "8", "8C", "9", "9C", "13", "13C", "4", "4C", "5", "5C", "6", "6C", "10", "10C", "11", "11C", "12", "12C", "UNK", ""))
factor(TX_species$rpn, levels = c("1", "1C", "2", "2C", "3", "3C", "7", "7C", "8", "8C", "9", "9C", "13", "13C", "4", "4C", "5", "5C", "6", "6C", "10", "10C", "11", "11C", "12", "12C", "14", UNK", ""))
factor(TX_species$rpn, levels = c("1", "1C", "2", "2C", "3", "3C", "7", "7C", "8", "8C", "9", "9C", "13", "13C", "4", "4C", "5", "5C", "6", "6C", "10", "10C", "11", "11C", "12", "12C", "14", "UNK", ""))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rgb(31,119,180)
rgba(31,119,180)
runApp()
runApp()
runApp()
runApp()
